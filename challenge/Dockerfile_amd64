# syntax=docker/dockerfile:1

ARG UBUNTU_VERSION=20.04
ARG DOJO_CHALLENGE=challenge-mini
ARG DEFAULT_INSTALL_SELECTION=yes
ARG INSTALL_KERNEL=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_TCPDUMP=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_CAPSTONE=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_RADARE2=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_AFL=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_RAPPEL=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_RP=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_GECKODRIVER=${DEFAULT_INSTALL_SELECTION}
# ARG INSTALL_BURPSUITE=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_BUSYBOX=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_GLOW=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_DESKTOP=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_VIRTIOFSD=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_IDA_FREE=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_BINJA_FREE=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_GHIDRA=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_ANGR_MANAGEMENT=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_GDB=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_TOOLS_PIP=${DEFAULT_INSTALL_SELECTION}
ARG INSTALL_TOOLS_APT=${DEFAULT_INSTALL_SELECTION}

FROM ubuntu:${UBUNTU_VERSION} AS essentials

SHELL ["/bin/bash", "-ceov", "pipefail"]

ENV DEBIAN_FRONTEND noninteractive
ENV LC_CTYPE=C.UTF-8

RUN <<EOF
    rm -f /etc/apt/apt.conf.d/docker-clean
    echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

    (set +o pipefail; yes | unminimize)

    dpkg --add-architecture i386

    apt-get clean && rm -rf /var/lib/apt/lists/*
EOF

RUN sed -i.bak 's|https\?://archive.ubuntu.com|http://mirrors.hust.edu.cn|g' /etc/apt/sources.list
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && xargs apt-get install --no-install-recommends -yqq <<EOF && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
        ca-certificates
        curl
        socat
        sudo
        vim
        wget
        unzip
EOF

RUN rm -f /usr/lib/python3.*/EXTERNALLY-MANAGED

################################################################################

FROM essentials AS builder-essentials

RUN sed -i.bak 's|https\?://archive.ubuntu.com|http://mirrors.hust.edu.cn|g' /etc/apt/sources.list
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && xargs apt-get install --no-install-recommends -yqq <<EOF && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
        build-essential
EOF

################################################################################

FROM builder-essentials AS builder

RUN sed -i.bak 's|https\?://archive.ubuntu.com|http://mirrors.hust.edu.cn|g' /etc/apt/sources.list
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && xargs apt-get install --no-install-recommends -yqq <<EOF && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
        autoconf
        bc
        bison
        cargo
        clang
        cmake
        cpio
        openjdk-17-jdk
        flex
        dwarves
        g++-multilib
        gcc-multilib
        git
        libc6-dev-i386
        libc6:i386
        libedit-dev
        libelf-dev
        libffi-dev
        libglib2.0-dev
        libgmp-dev
        libini-config-dev
        libncurses5:i386
        libpcap-dev
        libpixman-1-dev
        libseccomp-dev
        libssl-dev
        libstdc++6:i386
        libtool-bin
        llvm
        man-db
        manpages-dev
        nasm
        python-is-python3
        python3-dev
        python3-pip
        rubygems
        squashfs-tools
        upx-ucl
EOF

################################################################################

FROM builder AS builder-github-tools
RUN <<EOF
    git clone --depth 1 --recurse-submodules https://github.com/zolutal/kropr /opt/kropr
    cd /opt/kropr
    cargo install --path . --root /tmp
    mv /tmp/bin/ropr /usr/bin/kropr
    chmod +x /usr/bin/kropr

    git clone --depth 1 --recurse-submodules https://github.com/zolutal/gdb-pt-dump /opt/pt-dump
EOF

################################################################################

FROM builder AS builder-kernel-no
RUN mkdir /opt/linux
FROM builder AS builder-kernel-yes

RUN <<EOF
    mkdir /opt/linux
    wget -O - https://mirrors.hust.edu.cn/kernel.org/linux/kernel/v6.x/linux-6.6.32.tar.gz | tar xzC /opt/linux
    cd /opt/linux/linux-6.6.32
    make defconfig
EOF

RUN awk '{$1=$1};1' >> /opt/linux/linux-6.6.32/.config <<EOF
    CONFIG_9P_FS=y
    CONFIG_9P_FS_POSIX_ACL=y
    CONFIG_9P_FS_SECURITY=y
    CONFIG_BALLOON_COMPACTION=y
    CONFIG_CRYPTO_DEV_VIRTIO=y
    CONFIG_DEBUG_FS=y
    CONFIG_DEBUG_INFO=y
    CONFIG_DEBUG_INFO_BTF=y
    CONFIG_DEBUG_INFO_DWARF4=y
    CONFIG_DEBUG_INFO_REDUCED=n
    CONFIG_DEBUG_INFO_SPLIT=n
    CONFIG_DEVPTS_FS=y
    CONFIG_DRM_VIRTIO_GPU=y
    CONFIG_FRAME_POINTER=y
    CONFIG_GDB_SCRIPTS=y
    CONFIG_HW_RANDOM_VIRTIO=y
    CONFIG_HYPERVISOR_GUEST=y
    CONFIG_NET_9P=y
    CONFIG_NET_9P_DEBUG=n
    CONFIG_NET_9P_VIRTIO=y
    CONFIG_PARAVIRT=y
    CONFIG_PCI=y
    CONFIG_PCI_HOST_GENERIC=y
    CONFIG_VIRTIO_BALLOON=y
    CONFIG_VIRTIO_BLK=y
    CONFIG_VIRTIO_BLK_SCSI=y
    CONFIG_VIRTIO_CONSOLE=y
    CONFIG_VIRTIO_INPUT=y
    CONFIG_VIRTIO_NET=y
    CONFIG_VIRTIO_PCI=y
    CONFIG_VIRTIO_PCI_LEGACY=y
EOF

RUN <<EOF
    cd /opt/linux/linux-6.6.32
    make -j$(nproc) bzImage
    ln -sf $PWD/arch/x86/boot/bzImage ../bzImage
    ln -sf $PWD/vmlinux ../vmlinux
    ln -sf /opt/linux/linux-6.6.32 /opt/linux/linux
EOF

FROM builder-kernel-${INSTALL_KERNEL} AS builder-kernel

################################################################################

FROM builder AS builder-gdb-no
FROM builder AS builder-gdb-yes

RUN <<EOF
    mkdir /opt/gdb
    wget -O - https://ftp.gnu.org/gnu/gdb/gdb-11.1.tar.gz | tar xzC /opt/gdb
    cd /opt/gdb/gdb-11.1
    mkdir build
    cd build
    ../configure --prefix=/usr --with-python=/usr/bin/python3
    make -j$(nproc)
    make install
EOF

RUN <<EOF
    git clone --branch 2024.02.14 --depth 1 --recurse-submodules https://github.com/pwndbg/pwndbg /opt/pwndbg
    cd /opt/pwndbg
    ./setup.sh

    mkdir -p /opt/gef
    wget -O /opt/gef/gdbinit-gef.py -q https://gef.blah.cat/py

    git clone --depth 1 https://github.com/jerdna-regeiz/splitmind /opt/splitmind
    git clone https://github.com/scwuaptx/Pwngdb.git /opt/Pwngdb
    git clone --depth 1 https://github.com/nccgroup/libslub /opt/libslub
    cd /opt/libslub
    pip install -r requirements.txt
EOF

FROM builder-gdb-${INSTALL_GDB} AS builder-gdb

################################################################################

FROM essentials AS builder-code-server

RUN <<EOF
    curl -fsSL https://gitee.com/mirrors/code-server/raw/main/install.sh | /bin/sh /dev/stdin
    mkdir -p /opt/code-server/extensions
    wget -O /tmp/ms-vscode-cpptools.vsix 'https://github.com/microsoft/vscode-cpptools/releases/download/v1.20.5/cpptools-linux.vsix'    
    code-server --extensions-dir=/opt/code-server/extensions \
    	--install-extension ms-python.python \
     	--install-extension /tmp/ms-vscode-cpptools.vsix
    chmod +x /opt/code-server/extensions/ms-vscode.cpptools-*/bin/{cpptools*,libc.so}
    rm -rf /root/.cache/code-server /root/.local/share/code-server /tmp/ms-vscode-cpptools.vsix
EOF

WORKDIR /usr/lib/code-server/lib/vscode/node_modules/@vscode/ripgrep/bin

RUN mv rg rg.orig

COPY <<EOF ./rg
#!/usr/bin/python

import sys
import os

sys.argv[0] += ".orig"
if "--follow" in sys.argv:
    sys.argv.remove("--follow")
os.execv(sys.argv[0], sys.argv)
EOF

RUN chmod +x rg

################################################################################

FROM builder AS builder-tcpdump-no
FROM builder AS builder-tcpdump-yes
RUN <<EOF
    git clone --depth 1 https://github.com/the-tcpdump-group/tcpdump /opt/tcpdump
    cd /opt/tcpdump
    ./autogen.sh
    ./configure
    make install
EOF
FROM builder-tcpdump-${INSTALL_TCPDUMP} AS builder-tcpdump

FROM builder AS builder-capstone-no
FROM builder AS builder-capstone-yes
RUN <<EOF
    git clone --depth 1 https://github.com/capstone-engine/capstone /opt/capstone
    cd /opt/capstone
    make
    make install
EOF
FROM builder-capstone-${INSTALL_CAPSTONE} AS builder-capstone

FROM builder AS builder-radare2-no
FROM builder AS builder-radare2-yes
RUN <<EOF
    git clone --depth 1 https://github.com/radareorg/radare2 /opt/radare2
    cd /opt/radare2
    sys/install.sh
EOF
FROM builder-radare2-${INSTALL_RADARE2} AS builder-radare2

FROM builder AS builder-aflplusplus-no
FROM builder AS builder-aflplusplus-yes
RUN <<EOF
    git clone --depth 1 https://github.com/aflplusplus/aflplusplus /opt/aflplusplus
    cd /opt/aflplusplus
    make distrib
    make install
EOF
FROM builder-aflplusplus-${INSTALL_AFL} AS builder-aflplusplus

FROM builder AS builder-rappel-no
FROM builder AS builder-rappel-yes
RUN <<EOF
    git clone --depth 1 https://github.com/yrp604/rappel /opt/rappel
    cd /opt/rappel
    make
    cp bin/rappel /usr/bin/rappel
EOF
FROM builder-rappel-${INSTALL_RAPPEL} AS builder-rappel

FROM builder AS builder-rp-no
FROM builder AS builder-rp-yes
RUN <<EOF
    wget https://github.com/0vercl0k/rp/releases/download/v2.0.2/rp-lin-x64 -O /usr/bin/rp++
    chmod +x /usr/bin/rp++
EOF
FROM builder-rp-${INSTALL_RP} AS builder-rp

FROM builder AS builder-geckodriver-no
FROM builder AS builder-geckodriver-yes
RUN <<EOF
    wget -q -O - https://github.com/mozilla/geckodriver/releases/download/v0.32.0/geckodriver-v0.32.0-linux64.tar.gz | tar xvz -C /usr/local/bin
EOF
FROM builder-geckodriver-${INSTALL_GECKODRIVER} AS builder-geckodriver

# FROM builder AS builder-burpsuite-no
# FROM builder AS builder-burpsuite-yes
# RUN <<EOF
#     wget -q -O /tmp/burpsuite.sh https://portswigger.net/burp/releases/download?product=community\&version=2023.11.1.4\&type=Linux
#     sh /tmp/burpsuite.sh -q
#     rm /tmp/burpsuite.sh
# EOF
# FROM builder-burpsuite-${INSTALL_BURPSUITE} AS builder-burpsuite

FROM builder AS builder-busybox-no
FROM builder AS builder-busybox-yes
RUN <<EOF
    VERSION="busybox-1.33.2"
    mkdir /opt/busybox && cd "$_"
    wget -q -O - "https://busybox.net/downloads/${VERSION}.tar.bz2" | tar xvj
    pushd "${VERSION}"
    make defconfig
    sed -e 's/.*CONFIG_STATIC .*/CONFIG_STATIC=y/' -i .config
    make -j$(nproc) install
    popd
    ln -s "${VERSION}/_install" /opt/busybox/fs
EOF
FROM builder-busybox-${INSTALL_BUSYBOX} AS builder-busybox

FROM builder AS builder-glow-no
FROM builder AS builder-glow-yes
RUN <<EOF
    VERSION="1.5.1"
    DEB_NAME="glow_${VERSION}_amd64.deb"
    pushd /tmp
    wget -q "https://github.com/charmbracelet/glow/releases/download/v${VERSION}/${DEB_NAME}"
    apt install "./${DEB_NAME}"
    rm "${DEB_NAME}"
    popd
EOF
FROM builder-glow-${INSTALL_GLOW} AS builder-glow

FROM builder AS builder-virtiofsd-no
RUN mkdir /opt/virtiofsd
FROM builder AS builder-virtiofsd-yes
RUN <<EOF
    mkdir /opt/virtiofsd && cd "$_"
    wget -q -O ./build.zip "https://gitlab.com/virtio-fs/virtiofsd/-/jobs/artifacts/main/download?job=publish"
    unzip -p ./build.zip "$(zipinfo -1 ./build.zip | head -n1)" > ./virtiofsd
    rm -f ./build.zip
    chmod +x ./virtiofsd
EOF
FROM builder-virtiofsd-${INSTALL_VIRTIOFSD} AS builder-virtiofsd

################################################################################

FROM essentials AS builder-desktop-no
FROM essentials AS builder-desktop-yes

ARG UBUNTU_VERSION=20.04
RUN sed -i.bak 's|https\?://archive.ubuntu.com|http://mirrors.hust.edu.cn|g' /etc/apt/sources.list
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    [ "${UBUNTU_VERSION}" == "20.04" ] && TGR=common || TGR=tools; \
    apt-get update && xargs apt-get install -yqq <<EOF && \
    apt-get -y remove --purge at-spi2-core tumbler gvfs-* && \
    apt-get -y autoremove && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
        novnc
        tigervnc-standalone-server
        tigervnc-$TGR
        websockify
        xterm
        dbus-x11
        mousepad
        xclip
        xfce4
        xfce4-terminal
EOF

# TODO: can we generate desktop data with cli ???
COPY desktop/xfce4 /usr/share/desktop-base/profiles/xdg-config/xfce4
COPY desktop/pwncollege_background.jpg /usr/share/backgrounds/

RUN rm /etc/xdg/autostart/*

FROM builder-desktop-${INSTALL_DESKTOP} AS builder-desktop

################################################################################

FROM essentials AS builder-desktop-angr-management-no
FROM essentials AS builder-desktop-angr-management-yes

COPY desktop/angr-management.desktop /usr/share/applications/
ARG UBUNTU_VERSION=20.04
RUN <<EOF
    wget -q -O - https://github.com/angr/angr-management/releases/download/nightly/angr-management-ubuntu-${UBUNTU_VERSION}.tar.gz | tar xvz -C /opt
EOF

FROM builder-desktop-angr-management-${INSTALL_ANGR_MANAGEMENT} AS builder-desktop-angr-management

################################################################################

FROM essentials AS builder-desktop-ghidra-no
FROM essentials AS builder-desktop-ghidra-yes

COPY desktop/Ghidra.desktop /usr/share/applications/
RUN <<EOF
    wget -q -O /tmp/ghidra.zip https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.3_build/ghidra_10.3_PUBLIC_20230510.zip
    unzip /tmp/ghidra.zip -d /tmp
    mv /tmp/ghidra_10.3_PUBLIC /opt/ghidra
    rm /tmp/ghidra.zip
EOF

FROM builder-desktop-ghidra-${INSTALL_GHIDRA} AS builder-desktop-ghidra

################################################################################

FROM essentials AS builder-desktop-ida-free-no
FROM essentials AS builder-desktop-ida-free-yes

# IDA Freeware: only permissible for free and open deployments of the dojo!
COPY desktop/ida64.desktop /usr/share/applications/
COPY desktop/ida.opt /opt/ida/ida.opt
RUN <<EOF
    wget -O /tmp/idafree80_linux.run https://out7.hex-rays.com/files/idafree80_linux.run
    chmod 755 /tmp/idafree80_linux.run
    /tmp/idafree80_linux.run --optionfile /opt/ida/ida.opt
    rm /tmp/idafree80_linux.run /tmp/installbuilder_installer.log
EOF

FROM builder-desktop-ida-free-${INSTALL_IDA_FREE} AS builder-desktop-ida-free

################################################################################

FROM essentials AS builder-desktop-binja-free-no
FROM essentials AS builder-desktop-binja-free-yes

COPY desktop/binary-ninja.desktop /usr/share/applications/
RUN <<EOF
    wget -O /tmp/BinaryNinja-free.zip https://cdn.binary.ninja/installers/BinaryNinja-free.zip
    unzip -d /opt /tmp/BinaryNinja-free.zip
    wget -O /opt/binaryninja/icon.png  https://binary.ninja/icons/android-chrome-192x192.png
    rm /tmp/BinaryNinja-free.zip
EOF

FROM builder-desktop-binja-free-${INSTALL_BINJA_FREE} AS builder-desktop-binja-free

################################################################################

FROM essentials AS builder-tools-apt-no
FROM essentials AS builder-tools-apt-yes

RUN sed -i.bak 's|https\?://archive.ubuntu.com|http://mirrors.hust.edu.cn|g' /etc/apt/sources.list
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && xargs apt-get install --no-install-recommends -yqq <<EOF && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
        arping
        bash-builtins
        bat
        binutils
        binwalk
        bsdmainutils
        bsdutils
        debianutils
        diffutils
        ed
        elfutils
        emacs
        ethtool
        exiftool
        expect
        findutils
        firefox
        fish
        fonts-wqy-zenhei
        fortune
        gdb
        gedit
        genisoimage
        gnupg-utils
        hexedit
        icdiff
        iproute2
        iputils-ping
        ipython3
        keyutils
        kmod
        less
        ltrace
        nano
        neovim
        net-tools
        netcat-openbsd
        nmap
        openssh-server
        p7zip-full
        parallel
        patchelf
        pcaputils
        pcre2-utils
        psutils
        python3-ipdb
        qemu-system-x86
        qemu-user
        qemu-utils
        rsync
        screen
        silversearcher-ag
        strace
        tmux
        valgrind
        whiptail
        wireshark
        zip
        zsh
EOF

FROM builder-tools-apt-${INSTALL_TOOLS_APT} AS builder-tools-apt

################################################################################

FROM builder AS builder-tools-pip-no
FROM builder AS builder-tools-pip-yes

RUN xargs pip install --force-reinstall <<EOF
    angr
    asteval
    flask
    git+https://github.com/Gallopsled/pwntools#egg=pwntools
    git+https://github.com/secdev/scapy#egg=scapy
    jupyter
    psutil
    pycryptodome
    r2pipe
    requests
    selenium
EOF

RUN ln -sf /usr/bin/ipython3 /usr/bin/ipython

FROM builder-tools-pip-${INSTALL_TOOLS_PIP} AS builder-tools-pip

################################################################################

FROM builder-essentials AS builder-pwn.college

RUN mkdir /opt/pwn.college
COPY docker-initialize.sh /opt/pwn.college/docker-initialize.sh
COPY docker-entrypoint.d /opt/pwn.college/docker-entrypoint.d
COPY docker-entrypoint.sh /opt/pwn.college/docker-entrypoint.sh
COPY services.d /opt/pwn.college/services.d
COPY setuid_interpreter.c /opt/pwn.college/setuid_interpreter.c
COPY bash.bashrc /opt/pwn.college/bash.bashrc
COPY vm /opt/pwn.college/vm
COPY .tmux.conf /opt/pwn.college/.tmux.conf
COPY .gdbinit /opt/pwn.college/.gdbinit
COPY .radare2rc /opt/pwn.college/.radare2rc
COPY .pwn.conf /opt/pwn.college/.pwn.conf

RUN gcc /opt/pwn.college/setuid_interpreter.c -DSUID_PYTHON -o /opt/pwn.college/python && \
    gcc /opt/pwn.college/setuid_interpreter.c -DSUID_BASH -o /opt/pwn.college/bash && \
    gcc /opt/pwn.college/setuid_interpreter.c -DSUID_SH -o /opt/pwn.college/sh && \
    rm /opt/pwn.college/setuid_interpreter.c

################################################################################

FROM ubuntu:${UBUNTU_VERSION} AS challenge-nano

SHELL ["/bin/bash", "-ceov", "pipefail"]

ENV LC_CTYPE=C.UTF-8

COPY --link --from=essentials / /
COPY --link --from=builder-pwn.college /opt/pwn.college /opt/pwn.college

RUN <<EOF
    ln -sf /bin/bash /opt/pwn.college/ssh-entrypoint
    ln -sf /opt/pwn.college/vm/vm /usr/local/bin/vm

    ln -sf /home/hacker/.tmux.conf /root/.tmux.conf
    ln -sf /home/hacker/.gdbinit /root/.gdbinit
    ln -sf /home/hacker/.radare2rc /root/.radare2rc
    ln -sf /home/hacker/.pwn.conf /root/.pwn.conf

    mkdir /challenge
    install -m 400 <(echo 'pwn.college{uninitialized}') /flag
EOF

################################################################################

FROM challenge-nano AS challenge-micro
COPY --link --from=builder-code-server / /
COPY --link --from=builder-github-tools / /

################################################################################

FROM challenge-micro AS challenge-mini
COPY --link --from=builder-desktop-yes / /

################################################################################

FROM challenge-mini AS challenge-granular

# TODO: probably extra slow to `COPY / /`
COPY --link --from=builder-essentials / /
COPY --link --from=builder / /
COPY --link --from=builder-kernel /opt/linux /opt/linux
COPY --link --from=builder-tcpdump / /
COPY --link --from=builder-capstone / /
COPY --link --from=builder-radare2 / /
COPY --link --from=builder-aflplusplus / /
COPY --link --from=builder-rappel / /
COPY --link --from=builder-rp / /
COPY --link --from=builder-geckodriver / /
# COPY --link --from=builder-burpsuite / /
COPY --link --from=builder-busybox / /
COPY --link --from=builder-glow / /
COPY --link --from=builder-virtiofsd /opt/virtiofsd /opt/virtiofsd
COPY --link --from=builder-desktop-ida-free / /
COPY --link --from=builder-desktop-binja-free / /
COPY --link --from=builder-desktop-ghidra / /
COPY --link --from=builder-desktop-angr-management / /
COPY --link --from=builder-gdb / /
COPY --link --from=builder-tools-pip / /
COPY --link --from=builder-tools-apt / /

################################################################################

FROM challenge-mini AS challenge-full

# here, everything is installed except for
# IDA, which still uses the INSTALL_IDA_FREE parameter
# binja, which uses the INSTALL_BINJA_FREE parameter

# TODO: probably extra slow to `COPY / /`
COPY --link --from=builder-essentials / /
COPY --link --from=builder / /
COPY --link --from=builder-kernel-yes /opt/linux /opt/linux
COPY --link --from=builder-tcpdump-yes / /
COPY --link --from=builder-capstone-yes / /
COPY --link --from=builder-radare2-yes / /
COPY --link --from=builder-aflplusplus-yes / /
COPY --link --from=builder-rappel-yes / /
COPY --link --from=builder-rp-yes / /
COPY --link --from=builder-geckodriver-yes / /
# COPY --link --from=builder-burpsuite-yes / /
COPY --link --from=builder-busybox-yes / /
COPY --link --from=builder-glow-yes / /
COPY --link --from=builder-virtiofsd-yes /opt/virtiofsd /opt/virtiofsd
COPY --link --from=builder-desktop-ida-free / /
COPY --link --from=builder-desktop-binja-free / /
COPY --link --from=builder-desktop-ghidra-yes / /
COPY --link --from=builder-desktop-angr-management-yes / /
COPY --link --from=builder-gdb-yes / /
COPY --link --from=builder-tools-pip-yes / /
COPY --link --from=builder-tools-apt-yes / /

################################################################################

# legacy
FROM challenge-mini AS challenge-minimal
FROM challenge-full AS challenge

################################################################################

FROM ${DOJO_CHALLENGE} AS challenge-final

RUN <<EOF
    if [ -f /etc/ssh/ssh_config ]
    then
        echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
        echo "UserKnownHostsFile=/dev/null" >> /etc/ssh/ssh_config
        echo "LogLevel ERROR" >> /etc/ssh/ssh_config
    fi
EOF

RUN <<EOF
    if [ -f /etc/ssh/sshd_config ]
    then
        sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config
        sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/g' /etc/ssh/sshd_config
        sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
    fi
EOF

RUN <<EOF
    if id ubuntu; then userdel -f -r ubuntu; fi

    useradd -s /bin/bash -m hacker
    passwd -d hacker

    echo -e '\n[ "$UID" -eq 1000 ] && . /opt/pwn.college/bash.bashrc' >> /etc/bash.bashrc

    find / -xdev -type f -perm -4000 -exec chmod u-s {} \;

    chmod u+s /opt/pwn.college/python \
              /opt/pwn.college/bash \
              /opt/pwn.college/sh \
              /opt/pwn.college/vm/vm

    date > /opt/pwn.college/build
EOF

USER hacker
WORKDIR /home/hacker
